{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WireGuard Setup Guide A beginner-friendly guide to setting up a secure WireGuard VPN. About This Project This repository hosts a technical guide for deploying WireGuard, a modern VPN solution. It demonstrates: - Audience-focused writing : Tailored for beginners with clear admonitions (notes, warnings). - Markdown best practices : Uses headers, code blocks, tables, and images with alt-text. - Process rigor : Peer-reviewed for accuracy and tested on Ubuntu 22.04. Key Features Step-by-step instructions with screenshots. Glossary for technical terms. Troubleshooting table for common issues. Tools Used Markdown : Structured with headers and lists. Vale : Linter for consistent style. Draw.io : Diagrams for workflows. How to Use Clone this repository. Review index.md for setup instructions. Adapt configurations for your network. License CC BY-NC 4.0 \u2014 Share and adapt with attribution.","title":"WireGuard Setup Guide"},{"location":"#wireguard-setup-guide","text":"A beginner-friendly guide to setting up a secure WireGuard VPN.","title":"WireGuard Setup Guide"},{"location":"#about-this-project","text":"This repository hosts a technical guide for deploying WireGuard, a modern VPN solution. It demonstrates: - Audience-focused writing : Tailored for beginners with clear admonitions (notes, warnings). - Markdown best practices : Uses headers, code blocks, tables, and images with alt-text. - Process rigor : Peer-reviewed for accuracy and tested on Ubuntu 22.04.","title":"About This Project"},{"location":"#key-features","text":"Step-by-step instructions with screenshots. Glossary for technical terms. Troubleshooting table for common issues.","title":"Key Features"},{"location":"#tools-used","text":"Markdown : Structured with headers and lists. Vale : Linter for consistent style. Draw.io : Diagrams for workflows.","title":"Tools Used"},{"location":"#how-to-use","text":"Clone this repository. Review index.md for setup instructions. Adapt configurations for your network.","title":"How to Use"},{"location":"#license","text":"CC BY-NC 4.0 \u2014 Share and adapt with attribution.","title":"License"},{"location":"part1/","text":"Part 1: Installing WireGuard Overview You\u2019ll install WireGuard on both the Linux server (where the VPN will be hosted) and any client devices (Windows, macOS, etc.). Follow these steps to ensure everything is set up correctly before moving on to configuration. Steps Check Your Kernel Version (Linux Server) WireGuard requires Linux kernel 5.6 or above, or backported modules on older distributions. bash uname -r If your distribution is older (e.g., Ubuntu 18.04), look up \u201cWireGuard backports\u201d to install the module. Update & Upgrade System Packages (Linux Server) Ensure your package index and installed packages are up-to-date: bash sudo apt update && sudo apt upgrade -y Install WireGuard (Linux Server) On Debian/Ubuntu: bash sudo apt install wireguard -y On CentOS/RHEL: bash sudo yum install epel-release -y sudo yum install kmod-wireguard wireguard-tools -y Check for Required Tools (Linux Server) Make sure the essential WireGuard tools (e.g., wg and wg-quick ) are available: bash which wg && which wg-quick Verify WireGuard Installation (Linux Server) Confirm the version: bash wg --version You should see a version number and build date. Install WireGuard GUI or CLI (Windows) Download the installer from WireGuard.com and run the .exe file. Follow on-screen prompts and click Install . Install WireGuard App (macOS) Get the official WireGuard app from the Mac App Store . Drag the app to Applications if needed, then open it. Install WireGuard Mobile Apps (iOS/Android) On iOS, search WireGuard in the App Store. On Android, install WireGuard from the Google Play Store. Launch the WireGuard Client (All Platforms) Open the application (Linux: wg-quick , Windows: WireGuard GUI, macOS/iOS/Android: WireGuard app). You\u2019ll configure it later in Part 3: Configuring Clients . (Optional) Enable Automatic Updates (Linux Server) Since security is crucial, consider enabling unattended upgrades or regularly run update checks: bash sudo apt install unattended-upgrades sudo dpkg-reconfigure unattended-upgrades Alt-text: Terminal showing WireGuard installation commands. Conclusion WireGuard is now installed on your server and any client devices. In the next section, you\u2019ll configure your Linux server with keys, network settings, and firewall rules to get your VPN fully operational.","title":"Part1"},{"location":"part1/#part-1-installing-wireguard","text":"","title":"Part 1: Installing WireGuard"},{"location":"part1/#overview","text":"You\u2019ll install WireGuard on both the Linux server (where the VPN will be hosted) and any client devices (Windows, macOS, etc.). Follow these steps to ensure everything is set up correctly before moving on to configuration.","title":"Overview"},{"location":"part1/#steps","text":"Check Your Kernel Version (Linux Server) WireGuard requires Linux kernel 5.6 or above, or backported modules on older distributions. bash uname -r If your distribution is older (e.g., Ubuntu 18.04), look up \u201cWireGuard backports\u201d to install the module. Update & Upgrade System Packages (Linux Server) Ensure your package index and installed packages are up-to-date: bash sudo apt update && sudo apt upgrade -y Install WireGuard (Linux Server) On Debian/Ubuntu: bash sudo apt install wireguard -y On CentOS/RHEL: bash sudo yum install epel-release -y sudo yum install kmod-wireguard wireguard-tools -y Check for Required Tools (Linux Server) Make sure the essential WireGuard tools (e.g., wg and wg-quick ) are available: bash which wg && which wg-quick Verify WireGuard Installation (Linux Server) Confirm the version: bash wg --version You should see a version number and build date. Install WireGuard GUI or CLI (Windows) Download the installer from WireGuard.com and run the .exe file. Follow on-screen prompts and click Install . Install WireGuard App (macOS) Get the official WireGuard app from the Mac App Store . Drag the app to Applications if needed, then open it. Install WireGuard Mobile Apps (iOS/Android) On iOS, search WireGuard in the App Store. On Android, install WireGuard from the Google Play Store. Launch the WireGuard Client (All Platforms) Open the application (Linux: wg-quick , Windows: WireGuard GUI, macOS/iOS/Android: WireGuard app). You\u2019ll configure it later in Part 3: Configuring Clients . (Optional) Enable Automatic Updates (Linux Server) Since security is crucial, consider enabling unattended upgrades or regularly run update checks: bash sudo apt install unattended-upgrades sudo dpkg-reconfigure unattended-upgrades Alt-text: Terminal showing WireGuard installation commands.","title":"Steps"},{"location":"part1/#conclusion","text":"WireGuard is now installed on your server and any client devices. In the next section, you\u2019ll configure your Linux server with keys, network settings, and firewall rules to get your VPN fully operational.","title":"Conclusion"},{"location":"part2/","text":"Part 2: Configuring the Server Overview In this section, you\u2019ll generate the server\u2019s WireGuard keys, create the main configuration file, enable IP forwarding, and set up your firewall. By the end, your server will be ready to accept client connections. Steps Enable IP Forwarding Edit the sysctl configuration to allow packet forwarding between interfaces: bash sudo nano /etc/sysctl.conf Uncomment or add the following line: net.ipv4.ip_forward=1 Apply the changes immediately: bash sudo sysctl -p Create a Directory for WireGuard Keys This helps keep things organized and secure: bash sudo mkdir -p /etc/wireguard/keys Ensure only the root user can access it: bash sudo chmod 700 /etc/wireguard/keys Generate Server Private and Public Keys Use a restricted umask so your keys are not world-readable: bash cd /etc/wireguard/keys umask 077 wg genkey | tee server-private.key | wg pubkey > server-public.key Never share your private key with anyone. Check Key Permissions Make sure the private key is readable only by root: bash ls -l /etc/wireguard/keys If needed, adjust with chmod 600 server-private.key . Create the Server Configuration File ( wg0.conf ) Open the file in your preferred editor: bash sudo nano /etc/wireguard/wg0.conf Add the following (replace <server-private-key> with the contents of server-private.key ): ```ini [Interface] Address = 10.8.0.1/24 ListenPort = 51820 PrivateKey = # Example peer block: [Peer] PublicKey = AllowedIPs = 10.8.0.2/32 `` - You will add more [Peer]` sections later for additional clients. Set DNS (Optional) If you want to push a DNS server to your clients, add a line under [Interface] (assuming you use 1.1.1.1 or your own DNS): DNS = 1.1.1.1 Some client apps (like Windows or macOS) can auto-import this setting. Open the Firewall Port (51820) On Ubuntu with UFW: bash sudo ufw allow 51820/udp On CentOS/RHEL with firewalld: bash sudo firewall-cmd --add-port=51820/udp --permanent sudo firewall-cmd --reload Make sure your hosting provider or router is forwarding UDP port 51820 to your server. Bring Up the Interface Load the WireGuard configuration: bash sudo wg-quick up wg0 Check status: bash sudo wg You should see wg0 interface details and any configured peers. Enable WireGuard on Boot On systems using systemd , enable the service to start automatically: bash sudo systemctl enable wg-quick@wg0 This ensures your WireGuard interface comes up after a reboot. Verify IP Forwarding and Connectivity Run: bash sysctl net.ipv4.ip_forward You should see net.ipv4.ip_forward = 1 . Use tools like ping or traceroute to test connectivity from the server to the VPN interface ( 10.8.0.1 ) or other LAN devices if applicable. [!WARNING] Never share your server-private.key ! Store it securely and limit file permissions to root-only. Alt-text: Example WireGuard server configuration file. Conclusion Your WireGuard server is now properly configured. Next, move on to Part 3: Configuring Clients to generate client keys, create client configuration files, and connect to the server.","title":"Part2"},{"location":"part2/#part-2-configuring-the-server","text":"","title":"Part 2: Configuring the Server"},{"location":"part2/#overview","text":"In this section, you\u2019ll generate the server\u2019s WireGuard keys, create the main configuration file, enable IP forwarding, and set up your firewall. By the end, your server will be ready to accept client connections.","title":"Overview"},{"location":"part2/#steps","text":"Enable IP Forwarding Edit the sysctl configuration to allow packet forwarding between interfaces: bash sudo nano /etc/sysctl.conf Uncomment or add the following line: net.ipv4.ip_forward=1 Apply the changes immediately: bash sudo sysctl -p Create a Directory for WireGuard Keys This helps keep things organized and secure: bash sudo mkdir -p /etc/wireguard/keys Ensure only the root user can access it: bash sudo chmod 700 /etc/wireguard/keys Generate Server Private and Public Keys Use a restricted umask so your keys are not world-readable: bash cd /etc/wireguard/keys umask 077 wg genkey | tee server-private.key | wg pubkey > server-public.key Never share your private key with anyone. Check Key Permissions Make sure the private key is readable only by root: bash ls -l /etc/wireguard/keys If needed, adjust with chmod 600 server-private.key . Create the Server Configuration File ( wg0.conf ) Open the file in your preferred editor: bash sudo nano /etc/wireguard/wg0.conf Add the following (replace <server-private-key> with the contents of server-private.key ): ```ini [Interface] Address = 10.8.0.1/24 ListenPort = 51820 PrivateKey = # Example peer block: [Peer] PublicKey = AllowedIPs = 10.8.0.2/32 `` - You will add more [Peer]` sections later for additional clients. Set DNS (Optional) If you want to push a DNS server to your clients, add a line under [Interface] (assuming you use 1.1.1.1 or your own DNS): DNS = 1.1.1.1 Some client apps (like Windows or macOS) can auto-import this setting. Open the Firewall Port (51820) On Ubuntu with UFW: bash sudo ufw allow 51820/udp On CentOS/RHEL with firewalld: bash sudo firewall-cmd --add-port=51820/udp --permanent sudo firewall-cmd --reload Make sure your hosting provider or router is forwarding UDP port 51820 to your server. Bring Up the Interface Load the WireGuard configuration: bash sudo wg-quick up wg0 Check status: bash sudo wg You should see wg0 interface details and any configured peers. Enable WireGuard on Boot On systems using systemd , enable the service to start automatically: bash sudo systemctl enable wg-quick@wg0 This ensures your WireGuard interface comes up after a reboot. Verify IP Forwarding and Connectivity Run: bash sysctl net.ipv4.ip_forward You should see net.ipv4.ip_forward = 1 . Use tools like ping or traceroute to test connectivity from the server to the VPN interface ( 10.8.0.1 ) or other LAN devices if applicable. [!WARNING] Never share your server-private.key ! Store it securely and limit file permissions to root-only. Alt-text: Example WireGuard server configuration file.","title":"Steps"},{"location":"part2/#conclusion","text":"Your WireGuard server is now properly configured. Next, move on to Part 3: Configuring Clients to generate client keys, create client configuration files, and connect to the server.","title":"Conclusion"},{"location":"part3/","text":"Part 3: Configuring Clients Overview In this section, you\u2019ll generate client keys, create the client configuration file(s), and learn how to import them on various devices (Linux, Windows, macOS, iOS, Android). By the end, your client devices will be ready to securely connect to your WireGuard server. Steps Decide on the Client IP Addressing Scheme Each client (peer) needs a unique IP address in the VPN subnet (e.g., 10.8.0.x/24 ). Plan out which IP addresses to assign if you have multiple clients (e.g., 10.8.0.2 , 10.8.0.3 , etc.). Create a Separate Directory for Client Keys (Optional) On the same server where you generated the server keys, keep client keys organized: bash sudo mkdir -p /etc/wireguard/keys/clients sudo chmod 700 /etc/wireguard/keys/clients cd /etc/wireguard/keys/clients Generate a New Client Private/Public Key Pair Use wg genkey just like you did for the server: bash umask 077 wg genkey | tee client-private.key | wg pubkey > client-public.key This example shows how to create just one client; repeat for each additional client, using unique filenames (e.g., client1-private.key , client1-public.key ). Back Up Your Client Keys (Optional but Recommended) Keys can be regenerated, but it\u2019s often convenient to keep them in a secure backup location. For example, copy them to an encrypted USB drive. Add the Client to the Server Configuration Open your server config ( /etc/wireguard/wg0.conf ) and append a new [Peer] section: ini [Peer] PublicKey = <client-public-key> AllowedIPs = 10.8.0.2/32 Replace 10.8.0.2/32 with the IP you plan to assign to this client. Save and exit, then apply the changes: bash sudo wg-quick down wg0 && sudo wg-quick up wg0 Create the Client Configuration File ( client.conf ) On the server or on your local machine, create a file named client.conf (use a text editor): ```ini [Interface] Address = 10.8.0.2/24 PrivateKey = DNS = 1.1.1.1 # (Optional) Provide a DNS server [Peer] PublicKey = Endpoint = :51820 AllowedIPs = 0.0.0.0/0 PersistentKeepalive = 25 `` - Replace with the contents of client-private.key . - Replace with the contents of your server-public.key . - Replace ` with your server\u2019s public IP or domain. (Optional) Generate a QR Code for Mobile Apps For easier import on mobile devices, install qrencode on your Linux machine: bash sudo apt install qrencode -y Convert client.conf into a QR code: bash qrencode -t ansiutf8 < client.conf For iOS or Android WireGuard app, tap Scan from QR Code and point your camera at the generated code. Import the Client Configuration on Windows/macOS Windows : Download the .conf file onto your Windows system. Open the WireGuard app and click Import tunnel(s) . Select your client.conf file. macOS : Download the .conf file. In the WireGuard app, click Import tunnel(s) from file and select client.conf . Import the Client Configuration on Linux If using wg-quick : bash sudo cp client.conf /etc/wireguard/ sudo wg-quick up /etc/wireguard/client.conf Adjust file paths based on your distro\u2019s setup. You can also rename client.conf to something like wg-client.conf if desired. Test the Connection From the client device, activate the WireGuard tunnel. Verify your new VPN IP address: On Linux, run ip addr show and look for 10.8.0.x . On Windows/macOS, the WireGuard UI usually shows \u201cConnected\u201d or \u201cActive.\u201d Check if you can reach the server (e.g., ping 10.8.0.1 ). If you allowed full internet routing ( AllowedIPs = 0.0.0.0/0 ), verify with an IP-checking service that your public IP matches the server\u2019s. [!CAUTION] Replace <server-ip-or-domain> with your server\u2019s actual public IP or a resolvable domain. Using an incorrect address will prevent the client from connecting. Alt-text: Example WireGuard client configuration file. Conclusion Your client devices now have valid private/public keys, a corresponding configuration, and are ready to connect. In Part 4: Starting the VPN & Connecting , you\u2019ll finalize the setup by bringing up the VPN on both the server and clients and verifying traffic flow.","title":"Part3"},{"location":"part3/#part-3-configuring-clients","text":"","title":"Part 3: Configuring Clients"},{"location":"part3/#overview","text":"In this section, you\u2019ll generate client keys, create the client configuration file(s), and learn how to import them on various devices (Linux, Windows, macOS, iOS, Android). By the end, your client devices will be ready to securely connect to your WireGuard server.","title":"Overview"},{"location":"part3/#steps","text":"Decide on the Client IP Addressing Scheme Each client (peer) needs a unique IP address in the VPN subnet (e.g., 10.8.0.x/24 ). Plan out which IP addresses to assign if you have multiple clients (e.g., 10.8.0.2 , 10.8.0.3 , etc.). Create a Separate Directory for Client Keys (Optional) On the same server where you generated the server keys, keep client keys organized: bash sudo mkdir -p /etc/wireguard/keys/clients sudo chmod 700 /etc/wireguard/keys/clients cd /etc/wireguard/keys/clients Generate a New Client Private/Public Key Pair Use wg genkey just like you did for the server: bash umask 077 wg genkey | tee client-private.key | wg pubkey > client-public.key This example shows how to create just one client; repeat for each additional client, using unique filenames (e.g., client1-private.key , client1-public.key ). Back Up Your Client Keys (Optional but Recommended) Keys can be regenerated, but it\u2019s often convenient to keep them in a secure backup location. For example, copy them to an encrypted USB drive. Add the Client to the Server Configuration Open your server config ( /etc/wireguard/wg0.conf ) and append a new [Peer] section: ini [Peer] PublicKey = <client-public-key> AllowedIPs = 10.8.0.2/32 Replace 10.8.0.2/32 with the IP you plan to assign to this client. Save and exit, then apply the changes: bash sudo wg-quick down wg0 && sudo wg-quick up wg0 Create the Client Configuration File ( client.conf ) On the server or on your local machine, create a file named client.conf (use a text editor): ```ini [Interface] Address = 10.8.0.2/24 PrivateKey = DNS = 1.1.1.1 # (Optional) Provide a DNS server [Peer] PublicKey = Endpoint = :51820 AllowedIPs = 0.0.0.0/0 PersistentKeepalive = 25 `` - Replace with the contents of client-private.key . - Replace with the contents of your server-public.key . - Replace ` with your server\u2019s public IP or domain. (Optional) Generate a QR Code for Mobile Apps For easier import on mobile devices, install qrencode on your Linux machine: bash sudo apt install qrencode -y Convert client.conf into a QR code: bash qrencode -t ansiutf8 < client.conf For iOS or Android WireGuard app, tap Scan from QR Code and point your camera at the generated code. Import the Client Configuration on Windows/macOS Windows : Download the .conf file onto your Windows system. Open the WireGuard app and click Import tunnel(s) . Select your client.conf file. macOS : Download the .conf file. In the WireGuard app, click Import tunnel(s) from file and select client.conf . Import the Client Configuration on Linux If using wg-quick : bash sudo cp client.conf /etc/wireguard/ sudo wg-quick up /etc/wireguard/client.conf Adjust file paths based on your distro\u2019s setup. You can also rename client.conf to something like wg-client.conf if desired. Test the Connection From the client device, activate the WireGuard tunnel. Verify your new VPN IP address: On Linux, run ip addr show and look for 10.8.0.x . On Windows/macOS, the WireGuard UI usually shows \u201cConnected\u201d or \u201cActive.\u201d Check if you can reach the server (e.g., ping 10.8.0.1 ). If you allowed full internet routing ( AllowedIPs = 0.0.0.0/0 ), verify with an IP-checking service that your public IP matches the server\u2019s. [!CAUTION] Replace <server-ip-or-domain> with your server\u2019s actual public IP or a resolvable domain. Using an incorrect address will prevent the client from connecting. Alt-text: Example WireGuard client configuration file.","title":"Steps"},{"location":"part3/#conclusion","text":"Your client devices now have valid private/public keys, a corresponding configuration, and are ready to connect. In Part 4: Starting the VPN & Connecting , you\u2019ll finalize the setup by bringing up the VPN on both the server and clients and verifying traffic flow.","title":"Conclusion"},{"location":"part4/","text":"Part 4: Starting the VPN & Connecting Overview In this section, you\u2019ll learn how to bring up the VPN interface on the server, enable any required network settings (like IP forwarding), and connect from your client devices. Once complete, your WireGuard VPN will be fully operational and ready for secure remote access. Steps Double-Check the Server Configuration Ensure your /etc/wireguard/wg0.conf has the correct PrivateKey , Address , ListenPort , and [Peer] blocks for each client. Verify your firewall settings allow UDP traffic on port 51820 . Start WireGuard on the Server Use the wg-quick script to bring up your WireGuard interface: bash sudo wg-quick up wg0 This reads from /etc/wireguard/wg0.conf and starts the VPN interface. Enable WireGuard to Launch at Boot To ensure the VPN interface automatically starts after a reboot: bash sudo systemctl enable wg-quick@wg0 Enable IP Forwarding on the Server If you haven\u2019t already done so in previous steps: bash echo \"net.ipv4.ip_forward=1\" | sudo tee -a /etc/sysctl.conf sudo sysctl -p This allows your server to route traffic between the VPN interface and the internet/local network. Verify the Server Interface and Peers Run sudo wg to see the status of your WireGuard interface. Confirm the interface wg0 is up and that your clients\u2019 public keys are listed under Peers . Connect Desktop Clients Windows or macOS : Open the WireGuard application. Click Import tunnel and select your client.conf . Flip the switch to Activate or Connect . Linux (using wg-quick): bash sudo wg-quick up /path/to/client.conf Connect Mobile Clients iOS/Android : Install the WireGuard app from the App Store (iOS) or Play Store (Android). Tap + (add) \u2192 Scan from QR Code . Scan the QR code generated from your client.conf . Tap Activate or Connect . Test Connectivity From a connected client, ping the server\u2019s VPN IP (e.g., ping 10.8.0.1 ). If you see replies, your VPN tunnel is working. Optionally, try accessing resources on your local network or the internet to confirm routing is correct. Check Logs for Troubleshooting (if needed) Server : bash journalctl -u wg-quick@wg0 or bash sudo wg Clients : In the WireGuard desktop/mobile app, check the log or status panel for any error messages (e.g., \u201cHandshake did not complete\u201d). (Optional) Customize Traffic Rules and NAT If your VPN requires full internet routing ( AllowedIPs = 0.0.0.0/0 ), ensure NAT is configured properly on the server (e.g., using iptables or firewalld). For example, on Ubuntu with iptables: bash sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE Replace eth0 with the interface connected to the internet. Alt-text: WireGuard desktop app with an active tunnel. Conclusion Your WireGuard VPN is now active and clients can securely connect. Test further by checking local network resources and external internet access to confirm everything is routing correctly. If you run into issues, consult the logs or revisit your server and client configurations for typos or missing settings.","title":"Part4"},{"location":"part4/#part-4-starting-the-vpn-connecting","text":"","title":"Part 4: Starting the VPN &amp; Connecting"},{"location":"part4/#overview","text":"In this section, you\u2019ll learn how to bring up the VPN interface on the server, enable any required network settings (like IP forwarding), and connect from your client devices. Once complete, your WireGuard VPN will be fully operational and ready for secure remote access.","title":"Overview"},{"location":"part4/#steps","text":"Double-Check the Server Configuration Ensure your /etc/wireguard/wg0.conf has the correct PrivateKey , Address , ListenPort , and [Peer] blocks for each client. Verify your firewall settings allow UDP traffic on port 51820 . Start WireGuard on the Server Use the wg-quick script to bring up your WireGuard interface: bash sudo wg-quick up wg0 This reads from /etc/wireguard/wg0.conf and starts the VPN interface. Enable WireGuard to Launch at Boot To ensure the VPN interface automatically starts after a reboot: bash sudo systemctl enable wg-quick@wg0 Enable IP Forwarding on the Server If you haven\u2019t already done so in previous steps: bash echo \"net.ipv4.ip_forward=1\" | sudo tee -a /etc/sysctl.conf sudo sysctl -p This allows your server to route traffic between the VPN interface and the internet/local network. Verify the Server Interface and Peers Run sudo wg to see the status of your WireGuard interface. Confirm the interface wg0 is up and that your clients\u2019 public keys are listed under Peers . Connect Desktop Clients Windows or macOS : Open the WireGuard application. Click Import tunnel and select your client.conf . Flip the switch to Activate or Connect . Linux (using wg-quick): bash sudo wg-quick up /path/to/client.conf Connect Mobile Clients iOS/Android : Install the WireGuard app from the App Store (iOS) or Play Store (Android). Tap + (add) \u2192 Scan from QR Code . Scan the QR code generated from your client.conf . Tap Activate or Connect . Test Connectivity From a connected client, ping the server\u2019s VPN IP (e.g., ping 10.8.0.1 ). If you see replies, your VPN tunnel is working. Optionally, try accessing resources on your local network or the internet to confirm routing is correct. Check Logs for Troubleshooting (if needed) Server : bash journalctl -u wg-quick@wg0 or bash sudo wg Clients : In the WireGuard desktop/mobile app, check the log or status panel for any error messages (e.g., \u201cHandshake did not complete\u201d). (Optional) Customize Traffic Rules and NAT If your VPN requires full internet routing ( AllowedIPs = 0.0.0.0/0 ), ensure NAT is configured properly on the server (e.g., using iptables or firewalld). For example, on Ubuntu with iptables: bash sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE Replace eth0 with the interface connected to the internet. Alt-text: WireGuard desktop app with an active tunnel.","title":"Steps"},{"location":"part4/#conclusion","text":"Your WireGuard VPN is now active and clients can securely connect. Test further by checking local network resources and external internet access to confirm everything is routing correctly. If you run into issues, consult the logs or revisit your server and client configurations for typos or missing settings.","title":"Conclusion"}]}